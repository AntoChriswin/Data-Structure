struct Node {
    int data;
    struct Node* left;
    struct Node* right;
    int height;
};

struct Node* insert(struct Node* root, int data) {

    if (root == NULL) {
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->data = data;
        newNode->left = NULL;
        newNode->right = NULL;
        newNode->height = 1;
        return newNode;
    }
    
    if (data < root->data) {
        root->left = insert(root->left, data);
    } else if (data > root->data) {
        root->right = insert(root->right, data);
    } else {
      
        return root;
    }
    
    root->height = 1 + max(getHeight(root->left), getHeight(root->right));
   
    int balance = getBalance(root);
    
    if (balance > 1 && data < root->left->data) {
        return rotateRight(root);
    }
    
    if (balance < -1 && data > root->right->data) {
        return rotateLeft(root);
    }
    
    if (balance > 1 && data > root->left->data) {
        root->left = rotateLeft(root->left);
        return rotateRight(root);
    }
    
    if (balance < -1 && data < root->right->data) {
        root->right = rotateRight(root->right);
        return rotateLeft(root);
    }
    
    return root;
}

struct Node* delete(struct Node* root, int data) {
   
    if (root == NULL) {
        return root;
    }
    
    if (data < root->data) {
        root->left = delete(root->left, data);
    } else if (data > root->data) {
        root->right = delete(root->right, data);
    } else {
        if (root->left == NULL || root->right == NULL) {
            struct Node* temp = root->left ? root->left : root->right;
            
            if (temp == NULL) {
                temp = root;
                root = NULL;
            } else {
                *root = *temp;
            }
            
            free(temp);
        } else {
            struct Node* temp = getMinValueNode(root->right);
            root->data = temp->data;
            root->right = delete(root->right, temp->data);
        }
    }
    
    if (root == NULL) {
        return root;
    }
    
    
    root->height = 1 + max(getHeight(root->left), getHeight(root->right));
    
   
    int balance = getBalance(root);
    
    if (balance > 1 && getBalance(root->left) >= 0) {
        return rotateRight(root);
    }
    
    if (balance > 1 && getBalance(root->left) < 0) {
        root->left = rotateLeft(root->left);
        return rotateRight(root);
    }
    
    if (balance < -1 && getBalance(root->right) <= 0) {
        return rotateLeft(root);
    }
    
    if (balance < -1 && getBalance(root->right) > 0) {
        root->right = rotateRight(root->right);
        return rotateLeft(root);
    }
    
    return root;
}
